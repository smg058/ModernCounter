{"version":3,"file":"modern-counter.min.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * ModernCounter - A lightweight, dependency-free JavaScript library for animating numerical values\r\n *\r\n * @class\r\n * @description Creates smooth counting animations for numerical values with configurable options.\r\n *              The counter can be started, stopped, restarted, and toggled, making it suitable\r\n *              for various use cases including statistics, dashboards, and scroll-triggered animations.\r\n *\r\n * @example\r\n * // Basic usage\r\n * const counter = new ModernCounter(document.querySelector('.counter'), {\r\n *   from: 0,\r\n *   to: 1000,\r\n *   speed: 2000\r\n * });\r\n * counter.start();\r\n *\r\n * @example\r\n * // With scroll trigger\r\n * ScrollTrigger.create({\r\n *   trigger: element,\r\n *   start: \"top 80%\",\r\n *   onEnter: () => new ModernCounter(element).start()\r\n * });\r\n *\r\n * @author Chayson Media Group <dev@chayson.com>\r\n * @version 1.0.0\r\n * @license MIT\r\n */\r\nclass ModernCounter {\r\n  /**\r\n   * Default configuration options for the counter\r\n   *\r\n   * @static\r\n   * @type {Object}\r\n   * @property {number} from - Starting value (default: 0)\r\n   * @property {number} to - Target value (default: 0)\r\n   * @property {number} speed - Animation duration in milliseconds (default: 1000)\r\n   * @property {number} refreshInterval - Update frequency in milliseconds (default: 100)\r\n   * @property {number} decimals - Number of decimal places to show (default: 0)\r\n   * @property {Function} formatter - Function to format the displayed value\r\n   * @property {Function|null} onUpdate - Callback for each counter update\r\n   * @property {Function|null} onComplete - Callback when counting finishes\r\n   * @property {Object|null} scrollTrigger - GSAP ScrollTrigger configuration (if GSAP is available)\r\n   */\r\n  static DEFAULTS = {\r\n    from: 0,\r\n    to: 0,\r\n    speed: 1000,\r\n    refreshInterval: 100,\r\n    decimals: 0,\r\n    formatter: (value, options) => value.toFixed(options.decimals),\r\n    onUpdate: null,\r\n    onComplete: null,\r\n    scrollTrigger: null\r\n  };\r\n\r\n  /**\r\n   * Creates a new ModernCounter instance\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element - The DOM element to attach the counter to\r\n   * @param {Object} [options={}] - Configuration options to override defaults\r\n   */\r\n  constructor(element, options = {}) {\r\n    this.element = element;\r\n    this.options = {\r\n      ...ModernCounter.DEFAULTS,\r\n      ...this.getDataOptions(),\r\n      ...options\r\n    };\r\n    this.init();\r\n\r\n    // Set up ScrollTrigger if specified and GSAP is available.\r\n    if (this.options.scrollTrigger && typeof gsap !== 'undefined') {\r\n      this.setupScrollTrigger();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts counter options from element's data attributes\r\n   *\r\n   * @private\r\n   * @returns {Object} Options object with properties from data attributes\r\n   */\r\n  getDataOptions() {\r\n    const options = {};\r\n\r\n    // Explicitly check each data attribute and parse it correctly.\r\n    if (this.element.hasAttribute('data-from')) {\r\n      options.from = parseFloat(this.element.getAttribute('data-from')) || 0;\r\n    }\r\n\r\n    if (this.element.hasAttribute('data-to')) {\r\n      options.to = parseFloat(this.element.getAttribute('data-to')) || 0;\r\n    }\r\n\r\n    if (this.element.hasAttribute('data-speed')) {\r\n      options.speed = parseInt(this.element.getAttribute('data-speed'), 10) || 1000;\r\n    }\r\n\r\n    if (this.element.hasAttribute('data-refresh-interval')) {\r\n      options.refreshInterval = parseInt(this.element.getAttribute('data-refresh-interval'), 10) || 100;\r\n    } else if (this.element.hasAttribute('data-refreshInterval')) {\r\n      // Support both kebab-case and camelCase attribute names.\r\n      options.refreshInterval = parseInt(this.element.getAttribute('data-refreshInterval'), 10) || 100;\r\n    }\r\n\r\n    if (this.element.hasAttribute('data-decimals')) {\r\n      options.decimals = parseInt(this.element.getAttribute('data-decimals'), 10) || 0;\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Sets up a GSAP ScrollTrigger to start the animation.\r\n   *\r\n   * @private\r\n   * @returns (void)\r\n   */\r\n  setupScrollTrigger() {\r\n    // Create default ScrollTrigger configuration.\r\n    const triggerConfig = {\r\n      trigger: this.element,\r\n      start: 'top 80%',\r\n      onEnter: () => this.start(),\r\n      ...this.options.scrollTrigger\r\n    };\r\n\r\n    // Create the ScrollTrigger\r\n    if (gsap.ScrollTrigger) {\r\n      gsap.ScrollTrigger.create(triggerConfig);\r\n    } else {\r\n      console.warn('ScrollTrigger plugin not loaded, falling back to scroll listener'); // eslint-disable-line no-console\r\n      this.setupScrollListener();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets up a fallback scroll listener if ScrollTrigger isn't available\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\r\n  setupScrollListener() {\r\n    const checkScroll = () => {\r\n      const rect = this.element.getBoundingClientRect();\r\n      const windowHeight = window.innerHeight || document.documentElement.clientHeight;\r\n\r\n      if (rect.top <= windowHeight * 0.8 && rect.bottom >= 0) {\r\n        this.start();\r\n        window.removeEventListener('scroll', checkScroll);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', checkScroll);\r\n    checkScroll(); // Check initial position.\r\n  }\r\n\r\n  /**\r\n   * Initializes the counter with current options\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\r\n  init() {\r\n    this.value = this.options.from;\r\n    this.loops = Math.ceil(this.options.speed / this.options.refreshInterval);\r\n    this.loopCount = 0;\r\n    this.increment = (this.options.to - this.options.from) / this.loops;\r\n\r\n    // Debug log to verify correct values.\r\n    //console.log('Counter initialized with:', {\r\n    //  from: this.options.from,\r\n    //  to: this.options.to,\r\n    //  speed: this.options.speed,\r\n    //  refreshInterval: this.options.refreshInterval,\r\n    //  loops: this.loops,\r\n    //  increment: this.increment\r\n    //});\r\n  }\r\n\r\n  /**\r\n   * Updates the counter value on each animation frame\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\r\n  update = () => {\r\n    this.value += this.increment;\r\n    this.loopCount++;\r\n    this.render();\r\n\r\n    if (typeof this.options.onUpdate === 'function') {\r\n      this.options.onUpdate.call(this.element, this.value);\r\n    }\r\n\r\n    if (this.loopCount >= this.loops) {\r\n      clearInterval(this.interval);\r\n      this.value = this.options.to;\r\n      this.render();\r\n\r\n      if (typeof this.options.onComplete === 'function') {\r\n        this.options.onComplete.call(this.element, this.value);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Updates the counter with GSAP animation if available, falls back to interval method\r\n   *\r\n   * @private\r\n   * @returns {boolean|void}\r\n   */\r\n  animateWithGSAP() {\r\n    // Only use GSAP if available.\r\n    if (typeof gsap !== 'undefined') {\r\n      // Stop any existing animation.\r\n      this.stop();\r\n\r\n      // Store initial value for animation.\r\n      const startValue = this.options.from;\r\n      this.value = startValue;\r\n\r\n      // Create GSAP animation.\r\n      gsap.to(this, {\r\n        value: this.options.to,\r\n        duration: this.options.speed / 1000,\r\n        ease: 'power2.out',\r\n        onUpdate: () => {\r\n          this.render();\r\n          if (typeof this.options.onUpdate === 'function') {\r\n            this.options.onUpdate.call(this.element, this.value);\r\n          }\r\n        },\r\n        onComplete: () => {\r\n          if (typeof this.options.onComplete === 'function') {\r\n            this.options.onComplete.call(this.element, this.options.to);\r\n          }\r\n        }\r\n      });\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Renders the current counter value to the DOM\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\r\n  render() {\r\n    this.element.textContent = this.options.formatter.call(this.element, this.value, this.options);\r\n  }\r\n\r\n  /**\r\n   * Restarts the counter animation from the beginning\r\n   *\r\n   * @public\r\n   * @returns {ModernCounter} The counter instance for chaining\r\n   */\r\n  restart() {\r\n    this.stop();\r\n    this.init();\r\n    this.start();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Starts or resumes the counter animation\r\n   *\r\n   * @public\r\n   * @returns {ModernCounter} The counter instance for chaining\r\n   */\r\n  start() {\r\n    this.stop();\r\n    this.render();\r\n\r\n    // Try to use GSAP if available, fall back to interval method.\r\n    if (!this.animateWithGSAP()) {\r\n      this.interval = setInterval(this.update, this.options.refreshInterval);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stops/pauses the counter animation\r\n   *\r\n   * @public\r\n   * @returns {ModernCounter} The counter instance for chaining\r\n   */\r\n  stop() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n\r\n    // Kill GSAP animation if running.\r\n    if (typeof gsap !== 'undefined') {\r\n      gsap.killTweensOf(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggles the counter animation between running and stopped states\r\n   *\r\n   * @public\r\n   * @returns {ModernCounter} The counter instance for chaining\r\n   */\r\n  toggle() {\r\n    if (this.interval) {\r\n      this.stop();\r\n    } else {\r\n      this.start();\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper function to quickly initialize a counter\r\n *\r\n * @param {HTMLElement} element - The DOM element to attach the counter to\r\n * @param {Object} [options={}] - Configuration options to override defaults\r\n * @returns {ModernCounter} The initialized counter instance\r\n */\r\nconst initCounter = (element, options = {}) => {\r\n  const counter = new ModernCounter(element, options);\r\n  return counter.start();\r\n};\r\n\r\n/**\r\n * VerticalCounter - A counter with rolling digit animation\r\n * This version uses CSS transitions for reliable animation\r\n */\r\nclass VerticalCounter {\r\n  /**\r\n   * Default configuration\r\n   */\r\n  static DEFAULTS = {\r\n    duration: 2,\r\n    scrollTrigger: null,\r\n    onComplete: null\r\n  };\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor(element, options = {}) {\r\n    this.element = element;\r\n\r\n    // Get data attributes\r\n    const dataOptions = {};\r\n    if (element.hasAttribute('data-to')) {\r\n      dataOptions.to = element.getAttribute('data-to');\r\n    }\r\n    if (element.hasAttribute('data-duration')) {\r\n      dataOptions.duration = parseFloat(element.getAttribute('data-duration')) || 2;\r\n    }\r\n\r\n    // Merge options\r\n    this.options = {\r\n      ...VerticalCounter.DEFAULTS,\r\n      ...dataOptions,\r\n      ...options\r\n    };\r\n\r\n    // Ensure we have a target value\r\n    if (!this.options.to) {\r\n      console.error('VerticalCounter requires a \"to\" value');\r\n      return;\r\n    }\r\n\r\n    // Build the counter\r\n    this.buildCounter();\r\n\r\n    // Set up scroll trigger if specified\r\n    if (this.options.scrollTrigger) {\r\n      if (typeof ScrollTrigger !== 'undefined') {\r\n        ScrollTrigger.create({\r\n          trigger: this.element,\r\n          start: 'top 80%',\r\n          onEnter: () => this.start(),\r\n          ...this.options.scrollTrigger\r\n        });\r\n      } else {\r\n        this.setupScrollListener();\r\n      }\r\n    } else {\r\n      // Start automatically after a small delay\r\n      setTimeout(() => this.start(), 100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up scroll listener as fallback\r\n   */\r\n  setupScrollListener() {\r\n    const checkScroll = () => {\r\n      const rect = this.element.getBoundingClientRect();\r\n      const windowHeight = window.innerHeight || document.documentElement.clientHeight;\r\n\r\n      if (rect.top <= windowHeight * 0.8 && rect.bottom >= 0) {\r\n        this.start();\r\n        window.removeEventListener('scroll', checkScroll);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', checkScroll);\r\n    checkScroll();\r\n  }\r\n\r\n  /**\r\n   * Build the counter DOM structure\r\n   */\r\n  buildCounter() {\r\n    // Clear element\r\n    this.element.innerHTML = '';\r\n\r\n    // Set container styles\r\n    this.element.style.display = 'flex';\r\n    this.element.style.justifyContent = 'center';\r\n\r\n    // Get digits\r\n    const digits = this.options.to.toString().split('');\r\n    this.digitElements = [];\r\n\r\n    // Create each digit\r\n    digits.forEach(digitValue => {\r\n      // Create column container\r\n      const column = document.createElement('div');\r\n      column.className = 'vertical-counter-digit';\r\n      column.style.overflow = 'hidden';\r\n      column.style.position = 'relative';\r\n      column.style.width = '0.6em';\r\n      column.style.height = '1em';\r\n      column.style.margin = '0 2px';\r\n\r\n      // Create digit strip containing all numbers 0-9\r\n      const strip = document.createElement('div');\r\n      strip.className = 'vertical-counter-strip';\r\n      strip.style.position = 'absolute';\r\n      strip.style.top = '0';\r\n      strip.style.left = '0';\r\n      strip.style.width = '100%';\r\n      strip.style.textAlign = 'center';\r\n\r\n      // Add each possible digit\r\n      for (let i = 0; i <= 9; i++) {\r\n        const digitEl = document.createElement('div');\r\n        digitEl.className = 'vertical-counter-number';\r\n        digitEl.style.height = '1em';\r\n        digitEl.style.lineHeight = '1em';\r\n        digitEl.textContent = i;\r\n        strip.appendChild(digitEl);\r\n      }\r\n\r\n      // Add to DOM\r\n      column.appendChild(strip);\r\n      this.element.appendChild(column);\r\n\r\n      // Store for animation\r\n      this.digitElements.push({\r\n        column,\r\n        strip,\r\n        value: parseInt(digitValue, 10) || 0\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the animation\r\n   */\r\n  start() {\r\n    // For tracking completion\r\n    let completeCount = 0;\r\n    const totalDigits = this.digitElements.length;\r\n\r\n    // Function to call when all digits are done\r\n    const checkCompletion = () => {\r\n      completeCount++;\r\n      if (completeCount >= totalDigits && typeof this.options.onComplete === 'function') {\r\n        this.options.onComplete.call(this);\r\n      }\r\n    };\r\n\r\n    // Animate each digit\r\n    this.digitElements.forEach((digit, index) => {\r\n      const { strip, value } = digit;\r\n\r\n      // Reset position first (if needed)\r\n      strip.style.transition = 'none';\r\n      strip.style.transform = 'translateY(0)';\r\n\r\n      // Force reflow to ensure the reset takes effect\r\n      strip.offsetHeight;\r\n\r\n      // Set up transition with delay for stagger effect\r\n      strip.style.transition = `transform ${this.options.duration}s ease ${index * 0.1}s`;\r\n\r\n      // Add transitionend listener for completion callback\r\n      const transitionEndHandler = () => {\r\n        strip.removeEventListener('transitionend', transitionEndHandler);\r\n        checkCompletion();\r\n      };\r\n      strip.addEventListener('transitionend', transitionEndHandler);\r\n\r\n      // Start animation\r\n      setTimeout(() => {\r\n        strip.style.transform = `translateY(-${value}em)`;\r\n      }, 50); // Small delay to ensure transition is applied\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Reset the counter\r\n   */\r\n  reset() {\r\n    this.digitElements.forEach(digit => {\r\n      digit.strip.style.transition = 'none';\r\n      digit.strip.style.transform = 'translateY(0)';\r\n\r\n      // Force reflow\r\n      digit.strip.offsetHeight;\r\n    });\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * Initialize all vertical counters\r\n */\r\nconst initVerticalCounters = (selector = '.vertical-counter', options = {}) => {\r\n  const elements = document.querySelectorAll(selector);\r\n  const counters = [];\r\n\r\n  elements.forEach(element => {\r\n    counters.push(new VerticalCounter(element, options));\r\n  });\r\n\r\n  return counters;\r\n};\r\n\r\nexport { ModernCounter, VerticalCounter, initCounter, initVerticalCounters };\r\n"],"names":["ModernCounter","static","from","to","speed","refreshInterval","decimals","formatter","value","options","toFixed","onUpdate","onComplete","scrollTrigger","constructor","element","this","DEFAULTS","getDataOptions","init","gsap","setupScrollTrigger","hasAttribute","parseFloat","getAttribute","parseInt","triggerConfig","trigger","start","onEnter","ScrollTrigger","create","setupScrollListener","checkScroll","rect","getBoundingClientRect","windowHeight","window","innerHeight","document","documentElement","clientHeight","top","bottom","removeEventListener","addEventListener","loops","Math","ceil","loopCount","increment","update","render","call","clearInterval","interval","animateWithGSAP","stop","startValue","duration","ease","textContent","restart","setInterval","killTweensOf","toggle","initCounter","VerticalCounter","dataOptions","buildCounter","setTimeout","innerHTML","style","display","justifyContent","digits","toString","split","digitElements","forEach","digitValue","column","createElement","className","overflow","position","width","height","margin","strip","left","textAlign","i","digitEl","lineHeight","appendChild","push","completeCount","totalDigits","length","checkCompletion","digit","index","transition","transform","offsetHeight","transitionEndHandler","reset","initVerticalCounters","selector","elements","querySelectorAll","counters"],"mappings":"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"}